// <auto-generated />
using System;
using BankAccount.Warren.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankAccount.Warren.Database.Migrations
{
    [DbContext(typeof(BankAccountDbContext))]
    [Migration("20210320211038_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BankAccount.Warren.Domain.AccountOperations.AccountOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("varchar(130) CHARACTER SET utf8mb4")
                        .HasMaxLength(130);

                    b.Property<DateTime>("OperationDate")
                        .HasColumnName("operation_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OperationType")
                        .HasColumnName("operation_type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("account_operation");
                });

            modelBuilder.Entity("BankAccount.Warren.Domain.AccountOperations.AccountOperationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobReferenceId")
                        .HasColumnName("job_reference_id")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("varchar(130) CHARACTER SET utf8mb4")
                        .HasMaxLength(130);

                    b.Property<DateTime>("OperationDate")
                        .HasColumnName("operation_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperationResponseMessage")
                        .HasColumnName("operation_response_message")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("OperationType")
                        .HasColumnName("operation_type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnName("processed_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("account_operation_request");
                });

            modelBuilder.Entity("BankAccount.Warren.Domain.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnName("account_number")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<decimal>("ApplyiedBalance")
                        .HasColumnName("applied_balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnName("current_balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnName("owner_name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("account");
                });

            modelBuilder.Entity("BankAccount.Warren.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("BankAccount.Warren.Domain.AccountOperations.AccountOperation", b =>
                {
                    b.HasOne("BankAccount.Warren.Domain.Accounts.Account", "Account")
                        .WithMany("AccountOperations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAccount.Warren.Domain.AccountOperations.AccountOperationRequest", b =>
                {
                    b.HasOne("BankAccount.Warren.Domain.Accounts.Account", "Account")
                        .WithMany("AccountOperationRequest")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAccount.Warren.Domain.Accounts.Account", b =>
                {
                    b.HasOne("BankAccount.Warren.Domain.Users.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("BankAccount.Warren.Domain.Accounts.Account", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
